#!/usr/bin/python3

import argparse
import asyncio
import sys
from typing import Generator, Any

from pyeep import music, shape, volume
from pyeep.audio import PyAudioPlayer
from pyeep.pattern import Pattern, PatternSequence, Silence, Wave, Waves
from pyeep.wav import WaveWriter


class TestVolumeSlide(PatternSequence):
    """
    Frequency difference
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=volume.RampUp(0.0, 1.0), duration=1, freq=1000)
        yield Wave(volume=volume.Sine(0.5, 1.0, 5), duration=1, freq=1000)
        yield Wave(volume=volume.RampDown(0.0, 1.0), duration=1, freq=1000)


class TestFreqSlide(PatternSequence):
    """
    Frequency difference
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=1, duration=1, freq=440.0)
        yield Wave(freq=shape.Chirp(440.0, 880.0), duration=1, volume=1)
        yield Wave(volume=1, duration=1, freq=880.0)
        yield Wave(freq=shape.Chirp(880.0, 440.0), duration=1, volume=1)
        yield Wave(volume=1, duration=1, freq=440.0)


class TestTune(PatternSequence):
    """
    Play a tune to test note frequency calculation
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        for tune, octave, semitone in (
                ("EEFGGFED", 3, 0),
                ("CCDEEDD", 4, 0),
                ("EEFGGFED", 4, 3),
                ("CCDEDCC", 5, 0)):
            for n in tune:
                yield Wave(volume=1, duration=0.1, freq=music.note(n, octave=octave, semitone=semitone))
                yield Silence(duration=0.005)


class TestChords(PatternSequence):
    """
    Play a tune to test note frequency calculation
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        duration = 0.5
        for note in "CFG":
            freqs = music.chord_major(note)
            args: list[dict[str, Any]] = []
            for f in freqs:
                args.append({"duration": duration, "shape": f})
            yield Waves(*args)
            yield Silence(duration=0.1)


class App:
    def __init__(self, args: argparse.Namespace):
        self.args = args
        if self.args.output:
            self.player = WaveWriter(args.output)
        else:
            self.player = PyAudioPlayer()

    async def play(self):
        await self.player.loop()

    def main(self):
        try:
            # self.player.start_mono(TestVolumeSlide())
            # self.player.start_mono(TestFreqSlide())
            # self.player.start_mono(TestTune())
            self.player.start_mono(TestChords())
            asyncio.run(self.play())
        except KeyboardInterrupt:
            print("Shutting down...")
        finally:
            self.player.shutdown()


def main():
    parser = argparse.ArgumentParser(description="Pyeep test/demo program")
    parser.add_argument("-o", "--output", action="store", metavar="file.wav",
                        help="write the generated audio to the given file instead of playing it")
    args = parser.parse_args()

    app = App(args)
    app.main()


if __name__ == "__main__":
    sys.exit(main())
