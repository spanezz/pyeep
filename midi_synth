#!/usr/bin/env python3

import argparse
import asyncio
import queue
import sys

import numpy

import pyeep.app
from pyeep import midisynth


class SlowSine(midisynth.Sine):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.freq = 1
        self.factor = self.freq * 2.0 * numpy.pi / self.samplerate


class SlowSaw(midisynth.Sine):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.freq = 1
        self.factor = self.freq / self.samplerate


class TextSynth(midisynth.MidiSynth):
    def __init__(self, client, **kw):
        super().__init__(client, out_samplerate=10, **kw)
        self.queue: queue.Queue[float] = queue.Queue()
        self.last_output_frame_time: int | None = None
        self.instruments.set(0, SlowSine)
        self.instruments.set(1, SlowSaw)

    def on_process(self, frames: int):
        super().on_process(frames)

        out_last_frame_time = self.instruments.out_last_frame_time
        if self.last_output_frame_time is None or out_last_frame_time < self.last_output_frame_time:
            self.last_output_frame_time = out_last_frame_time - 1

        if self.last_output_frame_time < out_last_frame_time:
            data = self.instruments.generate(
                    self.last_output_frame_time,
                    out_last_frame_time - self.last_output_frame_time)

            for val in data:
                self.queue.put(val)
            self.last_output_frame_time = out_last_frame_time


class AudioSynth(midisynth.MidiSynth):
    def __init__(self, client, **kw):
        super().__init__(client, **kw)
        self.instruments.set(0, midisynth.Sine)
        self.instruments.set(1, midisynth.Saw)
        self.audio_outport = self.client.outports.register("audio out")

    def on_process(self, frames: int):
        super().on_process(frames)
        data = self.instruments.generate(self.client.last_frame_time, frames)
        self.audio_outport.get_array()[:] = data


class App(pyeep.app.JackApp):
    def __init__(self, args: argparse.Namespace):
        super().__init__(args)
        self.audio_synth = self.add_jack_component(AudioSynth)
        self.text_synth = self.add_jack_component(TextSynth, inport=self.audio_synth.inport)

    async def aio_main(self):
        while not self.shutting_down:
            await asyncio.sleep(0.2)

    def ui_main(self):
        while not self.shutting_down:
            val = self.text_synth.queue.get()
            print(val)


def main():
    parser = App.argparser("MIDISynth", "MIDI synth test")
    args = parser.parse_args()

    with App(args) as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
