#!/usr/bin/python3

# Example JACK midi event generator
#
# Play a drum pattern over JACK

import argparse
import asyncio
import json
import statistics
import sys
import threading
from collections import deque
from typing import NamedTuple

from pyeep.jackmidi import MidiPlayer

# See:
# https://soundprogramming.net/file-formats/general-midi-instrument-list/
# https://www.pgmusic.com/tutorial_gm.htm

DRUM_CHANNEL = 9
DRUM_BASS = 36
DRUM_HIGH_TOM = 50
DRUM_LOW_TOM = 45
DRUM_CLOSED_HIHAT = 42
DRUM_CRASH1 = 49
DRUM_SIDE_STICK = 37


class HeartSample(NamedTuple):
    # UNIX timestamp in nanoseconds
    time: int
    rate: float
    rr: tuple[float] = ()


class Player(MidiPlayer):
    def __init__(self, name: str):
        super().__init__(name)
        self.bpm = 0

    def drum(self, note: int, position: float, duration: float, velocity: int = 127):
        beat = 60 / self.bpm
        delay = beat * position
        self.play("note_on", velocity=velocity, note=note, channel=DRUM_CHANNEL, delay_sec=delay)
        self.play("note_off", note=note, channel=DRUM_CHANNEL, delay_sec=delay + beat * duration)


class App:
    def __init__(self, args: argparse.Namespace):
        self.args = args
        self.player: MidiPlayer
        self.last_sample: HeartSample | None = None
        self.last_window: deque[float] = deque(maxlen=10)
        self.improvised_delta: float = 0
        self.shutdown: bool = False

    async def read_socket(self):
        # Read heart beats from https://www.enricozini.org/blog/2023/debian/monitoring-a-heart-rate-monitor/
        reader, writer = await asyncio.open_unix_connection(self.args.socket)

        # Skip the initial line with recent heartbeat history
        initial = json.loads(await reader.readline())
        for sample in (HeartSample(*s) for s in initial["last"]):
            self.last_window.append(sample.rate)

        while not self.shutdown and (line := await reader.readline()):
            self.last_sample = HeartSample(*json.loads(line))
            self.on_sample()

    def on_sample(self):
        # print("SAMPLE", self.last_sample)
        if len(self.last_window) > 5:
            mean = statistics.mean(self.last_window)
            variance = statistics.variance(self.last_window)
            if self.last_sample.rate > mean + variance:
                self.improvised_delta = self.last_sample.rate - mean - variance
            elif self.last_sample.rate < mean - variance:
                self.improvised_delta = -(mean - variance - self.last_sample.rate)
            else:
                self.improvised_delta = 0.0
            print("Improvised delta:", self.improvised_delta)
        self.last_window.append(self.last_sample.rate)

    async def composer(self):
        while not self.shutdown:
            if self.last_sample is None:
                await asyncio.sleep(0.2)
                continue
            self.player.bpm = self.last_sample.rate

            if self.improvised_delta > 2:
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)
                self.player.drum(DRUM_CRASH1, 1/2, 1/4)
            elif self.improvised_delta > 0.5:
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)
                self.player.drum(DRUM_CLOSED_HIHAT, 1/2, 1/4)
            elif self.improvised_delta < -0.5:
                self.player.drum(DRUM_SIDE_STICK, 0, 1/4, velocity=64)
            else:
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)

            await asyncio.sleep(60 / self.player.bpm)

    async def amain(self):
        await asyncio.gather(self.read_socket(), self.composer())

    def aio_thread(self):
        asyncio.run(self.amain())

    def main(self):
        with Player("JACK of Hearts") as player:
            self.player = player
            aio_thread = threading.Thread(target=self.aio_thread, name="aio")
            aio_thread.start()
            try:
                while True:
                    cmd = input("> ")
                    if cmd.startswith("q"):
                        break
            except KeyboardInterrupt:
                pass
            finally:
                print("Shutting down...")
                self.shutdown = True


def main():
    parser = argparse.ArgumentParser(description="Generate a drum pattern based on heart beat")
    parser.add_argument("socket", action="store", help="path to the socket to use to read heart beats")
    args = parser.parse_args()

    app = App(args)
    app.main()


if __name__ == "__main__":
    sys.exit(main())
